<?php

/**
 * Implementation of hook_rules_action_info().
 */
function ibm_translate_rules_action_info() {
  return array(
    'i18n_auto_action_node_translate' => array(
      'label' => t('Translate a node into every enabled language'),
      'arguments' => array(
        'node' => array(
          'type' => 'node',
          'label' => t('Content')),
        ),
      'module' => 'Node',
    ),
  );
}

/**
 * Creates a translation for a Node in every enabled language.
 */
function ibm_translate_action_node_translate($node) {
  if (!$node->translation_source) {
    $node->language = i18n_get_lang(); // set language of node to current site languages
    $node->tnid = $node->nid; // set node id to itself

    $languages = i18n_language_list(); // get all enabled languages
    unset($languages[$node->language]); //unset the languages of source node
    
    foreach($languages as $langcode => $language) {
      module_load_include('inc', 'node', 'node.pages'); // needed to prepare node object
      //die(print_r($languages));
      //prepare new node
    $new_node            = (object)array();
    node_object_prepare($new_node);
    $new_node->name      = $node->name;
    $new_node->type      = $node->type;
    $new_node->language  = $langcode;
    $new_node->tnid      = $node->nid;
    
      if ($new_node->type == 'reply') {
        if ($new_node->language == 'en') {
          $t_lang = 'ar';
        }
      elseif ($new_node->language == 'ar') {
          $t_lang = 'en';
        }
      $parent = db_result(db_query("SELECT nid FROM {node_comments} WHERE cid = %d", $node->nid));
      $translation_set = db_result(db_query("SELECT tnid FROM {node} WHERE nid = %d", $parent));
      $translated_parent = db_result(db_query("SELECT nid FROM {node} WHERE language = '%s' AND tnid = %d", $t_lang, $translation_set));
      $new_node->comment_target_nid = $translated_parent;
      } 
    	
    	$body_split = FALSE;
    	// empty translated title and body
    	$ttitle = '';
    	$tbody = '';
    	
    // if the node body is too long, split it up
      if (strlen($node->body) > 1000) {
        // we need to send HTML to Google to not lose formatting
        $body_markup = check_markup($node->body);
        // split up the string in to our array
        $body_array = str_split($body_markup, 1000);
        // set flag so translating logic knows we split the string
        $body_split = TRUE;
        // make a copy of the array for manipulating safely
        $tmp_array = $body_array;
        // get the number of keys
        $tmp_keys = array_keys($tmp_array);
        // unset the first key, we don't need it
        unset($tmp_keys[0]);
        
        // cycle through remaining keys
        foreach ($tmp_keys as $key) {
          // find where the next real sentence ends
          $pos = strpos($body_array[$key], '. ');
          // complete the sentence of the previous chunk
          $body_array[$key - 1] = $body_array[$key - 1] . substr($body_array[$key], 0, $pos + 1);
          // get rid of the sentence fragment in the current chunk
          $body_array[$key] = substr_replace($body_array[$key], '', 0, $pos + 1);
        }
      }
      
      // get translation from IBM
      require_once("ibm_translate.php");
      
      if ($node->language == 'ar') {
        $srvc_id = 'ar-ar_en-us';
      }
      elseif ($node->language == 'en') {
        $srvc_id = 'en-us_ar-ar';
      }
      
      if ($body_split) {
        // define variables
        $tbody_array = array();
        $chunk_failed = FALSE;
        
        foreach ($body_array as $key => $chunk) {
            $tbody_array[$key] = translate($srvc_id, $chunk);
        }
        
      }
      else {
      
          // we need to send HTML to IBM to not lose formatting
          // attempt to turn mark-up back in to real line breaks
          // we need to send HTML to Google to not lose formatting
          
          $body_markup = check_markup($node->body);
          //die(print_r($body_markup));
          $tbody = translate($srvc_id, $body_markup);
          // attempt to turn mark-up back in to real line breaks
          $tbody = str_replace('<p>', '', $tbody);
          $tbody = str_replace('</p>', "\n\n", $tbody);
          $tbody = str_replace('<br>', "\n", $tbody);
          $tbody = str_replace('<br/>', "\n", $tbody);
          $tbody = str_replace('<br />', "\n", $tbody);        
          $new_node->body = $tbody;
      }
      
      $text = $node->title;
      $ttitle = translate($srvc_id, $text);
      // get rid of any HTML encoded data Google might send
      $new_node->title = html_entity_decode($ttitle, ENT_QUOTES);
      node_save(node_submit($new_node));
      //node_save($new_node);
      // inform user of new translation
      //krumo($new_node);
      drupal_set_message(t('New translation draft with language code of %language created in node %nid.', array('%language' => $new_node->language, '%nid' => $new_node->nid)));    
  }
 }
   return array('node' => $node);
}

/**
 * Implementation of hook_rules_defaults.
 */
function ibm_translate_rules_defaults() {
  return array(
    'rules' => 
    array (
      'rules_1' => 
      array (
        '#type' => 'rule',
        '#set' => 'event_node_insert',
        '#label' => 'Auto translate',
        '#active' => 1,
        '#weight' => '0',
        '#categories' => 
        array (
          0 => 'i18n',
        ),
        '#status' => 'custom',
        '#conditions' => 
        array (
          0 => 
          array (
            '#type' => 'condition',
            '#settings' => 
            array (
              '#argument map' => 
              array (
                'node' => 'node',
              ),
            ),
            '#name' => 'rules_condition_content_is_new',
            '#info' => 
            array (
              'label' => 'Created content is new',
              'arguments' => 
              array (
                'node' => 
                array (
                  'type' => 'node',
                  'label' => 'Content',
                ),
              ),
              'module' => 'Node',
            ),
            '#weight' => 0,
          ),
        ),
        '#actions' => 
        array (
          0 => 
          array (
            '#weight' => 0,
            '#info' => 
            array (
              'label' => 'Translate a node into every enabled language',
              'arguments' => 
              array (
                'node' => 
                array (
                  'type' => 'node',
                  'label' => 'Content',
                ),
              ),
              'module' => 'Node',
            ),
            '#name' => 'ibm_translate_action_node_translate',
            '#settings' => 
            array (
              '#argument map' => 
              array (
                'node' => 'node',
              ),
            ),
            '#type' => 'action',
          ),
        ),
        '#version' => 6003,
      ),
    ),
  );
}


